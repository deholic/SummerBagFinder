//
//  RegionSelectViewController.swift
//  SummerBagFinder
//
//  Created by EUIGYOM KIM on 2020/06/21.
//  Copyright (c) 2020 EUIGYOM KIM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

final class RegionSelectViewController: UIViewController {
    
    private struct Constant {
        static var regionCellIdentifier: String     = "RegionCell"
    }
    
    deinit {
        print(#function)
    }
    
    var interactor: RegionSelectRequestLogic?
    var regions: [RegionSelect.ViewModel.Region] = []

    lazy var tableView: UITableView = {
        let tableView = UITableView()
        
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: Constant.regionCellIdentifier)
        tableView.delegate = self
        tableView.dataSource = self
        
        return tableView
    }()
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupViews()
        setupTableView()
        
        interactor?.process(RegionSelect.Request.OnLoad())
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        interactor?.process(RegionSelect.Request.OnAppear())
    }
}

// MARK: - Setup

extension RegionSelectViewController {

    private func setupViews() {
        self.title = "지역 선택 - UIKit"
        self.edgesForExtendedLayout = [.all]
        
        view.backgroundColor = .systemBackground
    }
    
    private func setupTableView() {
        self.view.addSubview(tableView)
        
        tableView.snp.makeConstraints { (maker) in
            maker.top.leading.trailing.equalTo(view.safeAreaLayoutGuide)
            maker.bottom.equalToSuperview()
        }
    }
}

extension RegionSelectViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return regions.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return regions[section].subregions.count
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return regions[section].name
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: Constant.regionCellIdentifier, for: indexPath)
        
        let region = regions[indexPath.section].subregions[indexPath.row]
        cell.textLabel?.text = region.name
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.process(RegionSelect.Request.OnSelectRegion(indexPath: indexPath))
    }
}

extension RegionSelectViewController: RegionSelectDisplayLogic {
    
    func display(_ viewModel: CommonViewModel.Alert) {
        let alertController = UIAlertController(
            title: viewModel.title,
            message: viewModel.message,
            preferredStyle: .alert
        )
        alertController.addAction(UIAlertAction(title: viewModel.confirmTitle, style: .default))
        present(alertController, animated: true)
    }
    
    func display(_ viewModel: RegionSelect.ViewModel.Regions) {
        regions = viewModel.regions
        tableView.reloadData()
    }
}
