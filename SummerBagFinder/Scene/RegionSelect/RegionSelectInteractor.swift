//
//  RegionSelectInteractor.swift
//  SummerBagFinder
//
//  Created by EUIGYOM KIM on 2020/06/21.
//  Copyright (c) 2020 EUIGYOM KIM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: RegionSelectInteractor

class RegionSelectInteractor: RegionSelectBusinessLogic {
    var router: (NSObjectProtocol & RegionSelectRoutingLogic)?
    var presenter: RegionSelectPresentationLogic?
    private var worker: ResionSelectWorkingLogic?
    
    private var regions: [Region] = []
    private var stores: [Store]?
    
    private let message: String?
    
    init(message: String?, worker: ResionSelectWorkingLogic) {
        self.worker = worker
        self.message = message
    }
    
    deinit {
        print(#function)
    }
    
    func viewWillAppear() {
        if let message = message {
            let response = RegionSelect.Response.AlertMessage(message: message)
            presenter?.displayAlertMessage(response)
        }
    }
    
    func viewDidLoad() {

        worker?.fetchRegionList { [weak self] result in
            guard let self = self else { return }
            guard case let .success(regions) = result else { return }
            self.regions = regions
            let response = RegionSelect.Response.Regions(regions: regions)
            self.presenter?.displayRegionList(response)
        }
    }
    
    func onSelectRegion(_ request: RegionSelect.Request.OnSelectRegion) {
        let indexPath = request.indexPath
        let subregion = regions[indexPath.section].subregions[indexPath.row]
        
        worker?.fetchStoreList(regionCode: subregion.id) { [weak self] result in
            guard let self = self else { return }
            guard case let .success(stores) = result else { return }
            
            self.stores = stores
            self.router?.routeToStoreList(stores: stores)
        }
    }
}

// MARK: protocol

protocol RegionSelectBusinessLogic {
    func viewWillAppear()
    func viewDidLoad()
    func onSelectRegion(_ request: RegionSelect.Request.OnSelectRegion)
}

protocol RegionSelectPresentationLogic: class {
    func displayRegionList(_ response: RegionSelect.Response.Regions)
    func displayAlertMessage(_ response: RegionSelect.Response.AlertMessage)
}

protocol RegionSelectRoutingLogic {
    func routeToStoreList(stores: [Store]?)
}

protocol ResionSelectWorkingLogic {
    func fetchRegionList(completion: @escaping (Result<[Region], Error>) -> ())
    func fetchStoreList(regionCode: String, completion: @escaping (Result<[Store], Error>) -> ())
}
