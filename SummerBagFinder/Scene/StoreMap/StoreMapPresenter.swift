//
//  StoreMapPresenter.swift
//  
//
//  Created by mine on 2020/06/28.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

// MARK: StoreMapPresenter

enum StoreMapNextScene {
    case none
    case storeDetail
    case regionSelect
}

final class StoreMapPresenter: ObservableObject {
    
    // MARK: routing
    @Published var viewModel = StoreMap.ViewModel()
    
    var storeDetailBuilder: LazyStoreDetailBuildingLogic
    var regionSelectBuilder: LazyRegionSelectBuildingLogic

    init(
        storeDetailBuilder: LazyStoreDetailBuildingLogic,
        regionSelectBuilder: LazyRegionSelectBuildingLogic
    ) {
        self.storeDetailBuilder = storeDetailBuilder
        self.regionSelectBuilder = regionSelectBuilder
    }
}

// MARK: StoreMapPresentationLogic

extension StoreMapPresenter: StoreMapPresentationLogic {

    func present(_ response: StoreMap.Response) {
        switch response {
        case let .store(store, coordinate):
            let viewStore = StoreMap.ViewModel.Store(
                name: store.name,
                address: store.address,
                coordinate: coordinate
            )
            viewModel.store = viewStore
        case let .fromDetail(message):
            viewModel.dynamicMessage = message
        }
    }
}

// MARK: StoreMapRoutingLogic

extension StoreMapPresenter: StoreMapRoutingLogic {

    func routeToStoreDetail(store: Store, listener: StoreDetailListener?) {
        //라우팅: 스유 -> 스유
        storeDetailBuilder.prepareForBuilding(store: store, listener: listener)
        viewModel.nextScene = .storeDetail
    }
    
    func routeToRegionSelection(message: String?) {
        //라우팅: 스유 -> 유킷
        regionSelectBuilder.prepareForBuilding(message: message)
        viewModel.nextScene = .regionSelect
        viewModel.isPresented = true
    }
}
