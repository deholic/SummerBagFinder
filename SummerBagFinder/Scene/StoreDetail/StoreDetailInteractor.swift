//
//  StoreDetailInteractor.swift
//  
//
//  Created by mine on 2020/06/28.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: StoreDetailInteractor

class StoreDetailInteractor: StoreDetailBusinessLogic, ObservableObject {
    var router: StoreDetailRoutingLogic?
    var presenter: StoreDetailPresentationLogic?
    var worker: StoreDetailWorker?
    private let store: Store
    private let listener: StoreDetailListener?
    
    var message: String?
    
    init(store: Store, listener: StoreDetailListener? = nil) {
        self.store = store
        self.listener = listener
    }
    
    deinit {
        print(#function, #file)
    }
    
    func viewDidDisappear() {
        if let message = message {
            listener?.didFinishWriting(message: message)
        }
    }
    
    func didFinishWriting(request: StoreDetail.DidFinishWriting.Request) {
        message = request.message
        presenter?.showConfirmButton()
    }
}

// MARK: protocol

protocol StoreDetailBusinessLogic {
    func viewDidDisappear()
    func didFinishWriting(request: StoreDetail.DidFinishWriting.Request)
}

protocol StoreDetailPresentationLogic {
    func showConfirmButton()
}

protocol StoreDetailRoutingLogic {
    //func routeToSomewhere(segue: UIStoryboardSegue?)
}

protocol StoreDetailListener {
    func didFinishWriting(message: String)
}
