//
//  StoreDetailInteractor.swift
//  
//
//  Created by mine on 2020/06/28.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

// MARK: StoreDetailInteractor

final class StoreDetailInteractor: ObservableObject {
    var router: StoreDetailRoutingLogic?
    var presenter: StoreDetailPresentationLogic?
    private let store: Store
    private let worker: StoreDetailWorkingLogic
    private let listener: StoreDetailListener?
    
    var message: String?
    
    init(store: Store, worker: StoreDetailWorkingLogic, listener: StoreDetailListener? = nil) {
        self.store = store
        self.worker = worker
        self.listener = listener
    }
    
    deinit {
        print(#function, #file)
    }
}

extension StoreDetailInteractor: StoreDetailRequestLogic {
    
    func process(_ request: StoreDetail.Request.OnAppear) {
        presenter?.present(.store(store))
    }
    
    
    func process(_ request: StoreDetail.Request.CheckTextCount) {
        presenter?.present(.textCount(message?.count ?? 0))
    }
    
    func process(_ request: StoreDetail.Request.OnFinishWriting) {
        message = request.message
        if let message = message {
            listener?.didFinishWriting(message: message)
        }
        presenter?.present(.wordCountButton(show: true))
    }
    
    func process(_ request: StoreDetail.Request.ToStoreMap) {
        router?.routeToStoreMap(store: store)
    }
}

// MARK: protocol

protocol StoreDetailRequestLogic {
    func process(_ request: StoreDetail.Request.OnAppear)
    func process(_ request: StoreDetail.Request.CheckTextCount)
    func process(_ request: StoreDetail.Request.OnFinishWriting)
    func process(_ request: StoreDetail.Request.ToStoreMap)
}

protocol StoreDetailPresentationLogic {
    func present(_ response: StoreDetail.Response)
}

protocol StoreDetailRoutingLogic {
    func routeToStoreMap(store: Store)
}

protocol StoreDetailListener {
    func didFinishWriting(message: String)
}

protocol StoreDetailWorkingLogic {
     func doSomeWork()
}
